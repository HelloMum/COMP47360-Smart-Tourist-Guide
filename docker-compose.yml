services:
  frontend:
    build:
      context: ./src/frontend/react
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - myapp-network

  backend:
    build:
      context: ./src/backend/spring
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
    networks:
      - myapp-network

  scrappers:
    build:
      context: ./src/backend/scrappers
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
    networks:
      - myapp-network

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - myapp-network

  backup:
    image: postgres:latest
    depends_on:
      - db
    command: ["bash", "-c", "while true; do PGPASSWORD=${POSTGRES_PASSWORD} pg_dump -U ${POSTGRES_USER} -h db ${POSTGRES_DB} > /backup/backup_$(date +%Y%m%d_%H%M%S).sql; sleep 3600; done"]
    networks:
      - myapp-network

  nginx:
    image: nginx:latest
    ports:
      - "127.0.0.1:80:80"
    volumes:
      - ./src/deployment/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - myapp-network

volumes:
  db-data:
    driver: local

networks:
  myapp-network:
    driver: bridge